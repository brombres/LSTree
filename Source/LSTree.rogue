#===============================================================================
# LSTree.rogue
# May 22, 2020
#===============================================================================
$define VERSION "1.3.0"
$define AUTHOR  "October 30, 2020 by Abe Pralle"

$requireRogue "1.11"

uses Utility/CommandLineParser

$define INDENT 2

try
  LSTree( System.command_line_arguments )
catch (error:Error)
  Console.error.println( "=" * 80 )
  Console.error.println( "ERROR: " + error )
  Console.error.println
  Console.error.println "Run `lst -?` for help."
  Console.error.println( "=" * 80 )
  System.exit 1
endTry

class LSTree
  PROPERTIES
    ignore_hidden     = true
    show_sizes        = true
    exclude_mode      = false
    excluded          = String[]
    show_folders_only : Logical

    indent           = 0

  METHODS
    method init( args:String[] )
      local command = CommandLineParser().
      [
        option( "--depth=", &alias="-d" )
        option( "--help",   &aliases=["-h","-?"] )
        option( "--exclude",
          function( parser:CommandLineParser )
            if (parser.arg.contains("="))
              parser.command.ensure_list( "excluded" ).add( parser.arg.after_first('=') )
            else
              parser.cur_group = "excluded"
            endIf
          endFunction
        )
        alias( "-x", "--exclude", &require_value )
        option( "--hidden", &alias="-a" )
        option( "--no-sizes", &aliases=["--nosz","-n"] )
        option( "--folders", &alias="-f" )
        on_unknown(
          function (parser:CommandLineParser) with (print_usage=(this=>print_usage))
            local arg = parser.arg.after_first( '-' )
            local n = 0
            local found_number = false
            while (arg.count and arg[0].is_number)
              found_number = true
              n = n * 10 + arg[0].to_number
              arg = arg.rightmost( -1 )
            endWhile

            if (not found_number)
              throw UnrecognizedOptionError( parser.arg )
            endIf

            parser._handle( "--depth=$"(n) )
            if (arg.count) parser._handle( "-" + arg )
          endFunction
        )
      ].parse( args )

      show_folders_only = command//options//folders->Logical

      if (command//options//help)
        print_usage
        return
      endIf

      local depth = command//options//depth->Int32 # 0 is no restriction, 1=1 level, etc.
      local exclude_patterns = command//excluded.to_list<<String>>
      args = command//args.to_list<<String>>
      forEach (arg in rewriter=args.rewriter)
        rewriter.write( File.without_trailing_separator(arg) )
      endForEach
      ignore_hidden = not command//options//hidden->Logical
      show_sizes = not command//options["no-sizes"]->Logical

      indent = INDENT
      if (args.is_empty) args.add( "." )
      local total_size : Int64
      forEach (filepath in args)
        filepath = File.expand_path( filepath )

        # Tailor the exclude patterns to fit the starting folder
        excluded.clear
        forEach (pattern in exclude_patterns)
          excluded.add( File.ensure_ends_with_separator(filepath) + File.without_trailing_separator(pattern) )
        endForEach

        if (File.is_folder(filepath))
          println File.absolute_filepath( filepath )
          total_size += display( filepath, depth )
        else
          display( filepath, depth )
        endIf
      endForEach

      if (show_sizes) println "($)" (byte_count_to_string(total_size))

    method print_usage
      println "LSTree version " + VERSION
      println AUTHOR
      println @|
               |USAGE
               |  lst [options] [folder-path]
               |
               |OPTIONS
               |  --depth=<N>, -d <N>
               |    --depth=0 # No depth limitation (default)
               |    --depth=1 # Limit the listing to a single level
               |    --depth=2 # Limit the listing to two levels, etc.
               |
               |  --exclude, --exclude=pattern
               |    Without an argument, any wildcard filepaths that follow are automatically
               |    used as exclusion patterns. With an argument, only the specified pattern is
               |    excluded. Example: "lst --hidden --exclude=.git". See also WILDCARD
               |    PATTERNS, below.
               |
               |  --folders, -f
               |    Show folders only, without files.
               |
               |  --help
               |    Show this help text.
               |
               |  --hidden, -a
               |    Show hidden files.
               |
               |  --no-sizes, --nosz, -n
               |    Do not show file sizes.
               |
               |WILDCARD PATTERNS
               |  Put patterns in quotes to ensure that LSTree's non-standard wildcard patterns
               |  are correctly processed. By example:
               |    "*.rogue"      # matches files in the current folder ending with ".rogue"
               |    "**/*.rogue"   # matches files in subfolders or in the current folder.
               |    "*/**/*.rogue" # matches files in subfolders but not in the current folder
               |  Finally, '?' can be used to match any single character.

    method display( folder:String, depth:Int32 )->Int64
      local total_size : Real64

      local listing = String[]

      if (File.exists(folder) and not File.is_folder(folder))
        listing.add( File.filename(folder) )
        folder = File.folder( folder )
      else
        local pattern = ""
        while (folder.contains('*') or folder.contains('?'))
          if (pattern.count) pattern = "$/$" (File.filename(folder),pattern)
          else               pattern = File.filename( folder )
          folder = File.folder( folder )
        endWhile
        if (folder == "") folder = "."
        if (pattern == "") pattern = "*"

        listing = File.listing( folder, pattern, &=ignore_hidden, &omit_path )
      endIf

      local max_len = 0
      max_len = max_len.or_larger( (forEach in listing).count )
      max_len += 2

      forEach (filename in listing)
        local filepath = which{ folder.count:"$/$" (folder,filename) || filename }
        contingent
          necessary (not File.matches_wildcard_pattern(filepath,forEach in excluded))

          if (File.is_folder(filepath))
            if (depth == 1)
              # At our depth limit
              print_hypen
              print( filename ).print( "/" ).flush
              if (not show_sizes) println; nextIteration
              loop (max_len - (filename.count+1)) print ' '
              local folder_size = display( filepath, -1 )
              println (("[$]" (byte_count_to_string(folder_size))).right_justified(7))
              total_size += folder_size
            elseIf (depth < 0)
              # Beyond our depth limit - collect sizes but don't print anything
              total_size += display( filepath, depth-1 )
            else
              print_hypen
              println "$/" (filename)
              indent += INDENT
              local folder_size = display( filepath, ?:{depth:depth-1||0} )
              if (show_sizes)
                loop (indent-2) print ' '
                println "($)" (byte_count_to_string(folder_size))
              endIf
              indent -= INDENT
              total_size += folder_size
            endIf
          else
            local size = File.size( filepath )
            total_size += size
            if (depth >= 0 and not show_folders_only)
              print_hypen
              print filename
              if (show_sizes)
                loop (max_len - filename.count) print ' '
                print (("[$]" (byte_count_to_string(size))).right_justified(7))
              endIf
              println
            endIf
          endIf
        endContingent
      endForEach
      return total_size

    method print_hypen
      loop (indent-INDENT) print ' '
      print '-'
      loop (INDENT-1) print ' '

    method byte_count_to_string( n:Real64 )->String
      local size_suffix = ' '
      forEach (suffix in "KMGTP")
        if (n >= 1024) size_suffix = suffix
        else           escapeForEach
        n /= 1024
      endForEach
      local result : String
      if (n <= 99.5 and size_suffix != ' ') result = n.format( "1.1" )
      else                                  result = n.format( "1.0" )
      if (size_suffix != ' ') result += size_suffix
      return result
endClass
